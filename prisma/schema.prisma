generator client {
  provider = "prisma-client"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model contacts {
  id         String    @id @db.VarChar(50)
  first_name String    @db.VarChar(100)
  last_name  String    @db.VarChar(100)
  avatar     String?
  twitter    String?   @db.VarChar(100)
  notes      String?
  favorite   Boolean?  @default(false)
  email      String?   @db.VarChar(255)
  phone      String?   @db.VarChar(20)
  job        String?   @db.VarChar(50)
  active     Boolean?  @default(true)
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  updated_at DateTime? @default(now()) @db.Timestamptz(6)
}

model messages {
  id                                String    @id
  sender_id                         String
  receiver_id                       String
  content                           String
  read                              Boolean   @default(false)
  read_at                           DateTime?
  created_at                        DateTime  @default(now())
  users_messages_receiver_idTousers users     @relation("messages_receiver_idTousers", fields: [receiver_id], references: [id], onDelete: Cascade, map: "message_receiver_fkey")
  users_messages_sender_idTousers   users     @relation("messages_sender_idTousers", fields: [sender_id], references: [id], onDelete: Cascade, map: "message_sender_fkey")

  @@index([receiver_id])
  @@index([sender_id])
  @@index([sender_id, receiver_id, created_at])
}

model notifications {
  id         String   @id
  user_id    String
  message    String
  read       Boolean  @default(false)
  type       String?
  link       String?
  created_at DateTime @default(now())
  users      users    @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "notification_user_fkey")

  @@index([user_id])
}

model posts {
  id         String   @id
  author_id  String
  title      String
  content    String
  published  Boolean  @default(false)
  created_at DateTime @default(now())
  updated_at DateTime
  users      users    @relation(fields: [author_id], references: [id], onDelete: Cascade, map: "post_author_fkey")

  @@index([author_id])
}

model users {
  id                                   String          @id
  email                                String          @unique
  password                             String
  first_name                           String?
  last_name                            String?
  avatar                               String?
  twitter                              String?
  notes                                String?
  job                                  JobType?
  active                               Boolean         @default(false)
  created_at                           DateTime        @default(now())
  updated_at                           DateTime
  messages_messages_receiver_idTousers messages[]      @relation("messages_receiver_idTousers")
  messages_messages_sender_idTousers   messages[]      @relation("messages_sender_idTousers")
  notifications                        notifications[]
  posts                                posts[]
  users_A                              users[]         @relation("UserFriendship")
  users_B                              users[]         @relation("UserFriendship")
}

enum JobType {
  WRITER
  ACTOR
  SINGER
  PAINTER
}
